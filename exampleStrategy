from abc import ABC, abstractmethod

# стратегии, который все конкретные стратегии должны реализовать
class Strategy(ABC):
    @abstractmethod
    def execute(self, data: list) -> list:
        pass

# стратегия, реализующая алгоритм сортировки пузырьком
class BubbleSortStrategy(Strategy):
    def execute(self, data: list) -> list:
        n = len(data)
        for i in range(n):
            for j in range(0, n-i-1):
                if data[j] > data[j+1]:
                    data[j], data[j+1] = data[j+1], data[j]
        return data

# стратегия, реализующая алгоритм сортировки вставками
class InsertionSortStrategy(Strategy):
    def execute(self, data: list) -> list:
        for i in range(1, len(data)):
            key = data[i]
            j = i - 1
            while j >= 0 and key < data[j]:
                data[j + 1] = data[j]
                j -= 1
            data[j + 1] = key
        return data


class Context:
    def __init__(self, strategy: Strategy):
        self._strategy = strategy

    def set_strategy(self, strategy: Strategy):
        self._strategy = strategy

    def execute_strategy(self, data: list) -> list:
        return self._strategy.execute(data)


if __name__ == "__main__":
    data = [5, 2, 9, 1, 5, 6]
    context = Context(BubbleSortStrategy())
    print("Bubble Sort:", context.execute_strategy(data.copy()))

    context.set_strategy(InsertionSortStrategy())
    print("Insertion Sort:", context.execute_strategy(data.copy()))
